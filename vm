#!/usr/bin/env python3

import subprocess
import re
import sys


def die(msg):
    print(msg)
    sys.exit(1)


def usage():
    die("""
Usage:
  vm list
  vm start <name>
  vm stop <name>
  vm ssh <name>
  vm vnc <name>
  vm delete <name>
  vm rename <src> <dst>
  vm clone <src> <dst>
""")

# TODO create support + network configuration + port forwarding for ssh/vnc

def sh(cmd):
    return subprocess.check_output(cmd, shell=True).decode('utf-8')


def run(cmd):
    subprocess.call(cmd, shell=True)


def validate(arg):
    if arg is None:
        return None

    if not re.match("""^[A-Za-z0-9_]+$""", arg):
        die("Bad argument '{}' - should be [A-Za-z90-9_]+".format(arg))
    return arg

def list_vms():
    all_vms = sh('''vboxmanage list vms | cut -d '"' -f 2''').split("\n")
    all_vms.sort()
    running_vms = set(sh('''vboxmanage list runningvms | cut -d '"' -f 2''').split("\n"))

    print("{:16} {:12}".format("VM", "STATUS"))
    print("-" * (16+1+12))
    for vm in all_vms:
        if vm == "":
            continue
        status = "powered off"
        if vm in running_vms:
            status = "running"
        print("{:16} {:12}".format(vm, status))

def main():
    if len(sys.argv) < 2:
        usage()

    tmp = sys.argv + [None, None]
    cmd = validate(tmp[1])
    src = validate(tmp[2])
    dst = validate(tmp[3])

    if cmd == "list":
        list_vms()
    elif src is not None and dst is None:
        if cmd == "start":
            run("vboxmanage startvm --type headless {}".format(src))
        elif cmd == "stop":
            run("vboxmanage controlvm {} poweroff".format(src))
        elif cmd == "ssh":
            tmp = sh("vboxmanage showvminfo {} | grep ssh-forwarding".format(src))
            port = re.search("""host port = (\d+)""", tmp).group(1)
            run("ssh -p {} localhost".format(port))
        elif cmd == "vnc":
            tmp = sh(
                "vboxmanage showvminfo {} | grep VRDE | grep TCP/Ports".format(src))
            port = re.search("""TCP/Ports  = "(\d+)""", tmp).group(1)
            run(('''echo -en '\\x2e\\x2d\\xbf\\x57\\x6e\\xb0\\x6c\\x9e' | ''' +
                 '''vncviewer localhost:{} PasswordFile=/dev/stdin''').format(port))
        elif cmd == "delete":
            run("vboxmanage unregistervm {} --delete".format(src))
        else:
            usage()
    elif src is not None and dst is not None:
        if cmd == "rename":
            run("vboxmanage modifyvm {} --name {}".format(src, dst))
        elif cmd == "clone":
			# TODO update ssh/vnc ports
            run("vboxmanage clonevm {} --name {} --register".format(src, dst))
        else:
            usage()
    else:
        usage()

if __name__ == "__main__":
    main()
